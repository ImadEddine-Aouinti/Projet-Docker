name: CI/CD Pipeline Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Étape 1: Checkout du code
    - name: Cloner le dépôt
      uses: actions/checkout@v3

    # Étape 2: Configuration Java
    - name: Configurer Java 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    # Étape 3: Build Maven
    - name: Construire le projet avec Maven
      run: mvn clean package -DskipTests -f app_web/pom.xml

    # Étape 4: Configuration Docker
    - name: Configurer Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Afficher les versions Docker
      run: |
        docker --version
        docker compose version

    # Étape 5: Construction et test des conteneurs
    - name: Construire les images Docker
      run: docker compose -f docker-compose.yml build

    - name: Démarrer les conteneurs pour test
      run: docker compose -f docker-compose.yml up -d

    - name: Vérifier les conteneurs
      run: docker ps -a

    - name: Arrêter les conteneurs de test
      run: docker compose -f docker-compose.yml down

    # Étape 6: Préparation du déploiement (uniquement sur main)
    - name: Préparer les artefacts de déploiement
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p deploy-artifacts
        # Sauvegarder les images Docker
        IMAGES=$(docker compose -f docker-compose.yml config | awk '{if ($1 == "image:") print $2}')
        for image in $IMAGES; do
          echo "Sauvegarde de l'image $image"
          docker save $image -o deploy-artifacts/$(echo $image | tr '/' '_' | tr ':' '_').tar
        done
        # Copier les fichiers nécessaires
        cp docker-compose.yml deploy-artifacts/
        cp app_web/target/*.jar deploy-artifacts/ || echo "Aucun fichier JAR à copier"
        # Ajuster les permissions
        chmod -R 755 deploy-artifacts

    # Étape 7: Déploiement sur le serveur (uniquement sur main)
    - name: Transférer les fichiers vers le serveur
      if: github.ref == 'refs/heads/main'
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        source: "deploy-artifacts/*"
        target: "/home/i.aouinti/app/"
        overwrite: true
        tar_tmp_path: "/tmp"

    - name: Déployer sur le serveur distant
      if: github.ref == 'refs/heads/main'
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /home/i.aouinti/app
          # Charger les images Docker
          for f in *.tar; do
            docker load -i $f
          done
          # Démarrer l'application
          docker compose down || true
          docker compose up -d --build
          # Nettoyage
          rm -f *.tar
          echo "Déploiement terminé avec succès"
          docker ps
